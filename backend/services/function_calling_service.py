from services.constants import CATEGORY_SYNONYMS, INTENT_KEYWORDS, STOPWORDS, remove_accents
from typing import List, Optional, Dict, Any, overload
from sqlalchemy.orm import Session
from sqlalchemy import or_, func
from models.content_models import Product, Category
from rapidfuzz import process, fuzz
from services.extract_search_params import extract_search_params


def product_to_dict(p):
    return {
        "id": p.id,
        "title": p.title,
        "image": p.image,
        "price": float(p.price),
        "currentPrice": float(p.currentPrice) if p.currentPrice else None,
        "status": p.status,
        "stock": p.stock,
        "category": {
            "id": p.category.id,
            "title": p.category.title,
            "image": p.category.image if p.category else None
        } if p.category else None,
        "short_description": p.short_description,
        "product_type": p.product_type,
        "actions": [
            {"type": "add_to_cart", "label": "ƒê·∫∑t h√†ng", "product_id": p.id}
        ]
    }


@overload
def search_products(
    db: Session,
    search_params: Dict[str, Any],
    limit: int = 10
) -> List[Product]: ...


def search_products(
    db: Session,
    search_params: Dict[str, Any],
    limit: int = 10
) -> List[Product]:
    """
    T√¨m ki·∫øm s·∫£n ph·∫©m theo c√°c tham s·ªë ƒë√£ ph√¢n t√≠ch.
    
    Args:
        db (Session): SQLAlchemy session.
        search_params (Dict[str, Any]): C√°c tham s·ªë l·ªçc, v√≠ d·ª•:
            - name: t·ª´ kh√≥a t√™n
            - category: danh m·ª•c
            - min_price, max_price: kho·∫£ng gi√°
            - status, rating, in_stock, is_flash_sale
        limit (int): S·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ªëi ƒëa tr·∫£ v·ªÅ.

    Returns:
        List[Product]: Danh s√°ch s·∫£n ph·∫©m ORM object.
    """

    # N·∫øu c√≥ c·∫£ product_type v√† name, v√† name ch·ªâ l√† t·ª´ √Ω ƒë·ªãnh, lo·∫°i b·ªè name kh·ªèi filter
    if search_params.get('product_type') and search_params.get('name'):
        name_noaccent = remove_accents(search_params['name']).strip()
        intent_keywords_noaccent = [remove_accents(kw) for kw in INTENT_KEYWORDS]
        if name_noaccent in intent_keywords_noaccent:
            del search_params['name']
    query = db.query(Product)
    has_filter = False
    filter_logs = []
    fuzzy_name = None
    fuzzy_mode = False

    # L·ªçc theo t√™n s·∫£n ph·∫©m (t√¨m ki·∫øm g·∫ßn ƒë√∫ng, kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng, b·ªè kho·∫£ng tr·∫Øng th·ª´a, kh√¥ng d·∫•u cho t·ª´ kh√≥a)
    if search_params.get('name'):
        name = search_params['name'].strip().lower()
        name_noaccent = remove_accents(name)
        # N·∫øu name ch·ªâ l√† 1 t·ª´ (v√≠ d·ª•: 'iphone', 'oppo', 'macbook'), ch·ªâ l·ªçc theo title
        if len(name.split()) == 1:
            query = query.filter(
                or_(func.lower(Product.title).ilike(f'%{name}%'), func.lower(Product.title).ilike(f'%{name_noaccent}%'))
            )
            filter_logs.append(f"title~='{name}' (noaccent: '{name_noaccent}') (strict)")
        else:
            # N·∫øu name c√≥ nhi·ªÅu t·ª´, v·∫´n ∆∞u ti√™n l·ªçc theo title, nh∆∞ng cho ph√©p fuzzy ·ªü b∆∞·ªõc sau n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
            query = query.filter(
                or_(func.lower(Product.title).ilike(f'%{name}%'), func.lower(Product.title).ilike(f'%{name_noaccent}%'))
            )
            filter_logs.append(f"title~='{name}' (noaccent: '{name_noaccent}')")
        has_filter = True
        fuzzy_name = name
        # N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m theo title, m·ªõi th·ª≠ ti·∫øp short_description ·ªü b∆∞·ªõc fuzzy ph√≠a d∆∞·ªõi
    # L·ªçc theo m√¥ t·∫£ ng·∫Øn
    if search_params.get('description'):
        description = search_params['description'].strip().lower()
        query = query.filter(Product.short_description.ilike(f'%{description}%'))
        has_filter = True
        filter_logs.append(f"description~='{description}'")

    # L·ªçc theo gi√°
    if search_params.get('min_price') is not None:
        query = query.filter(Product.price >= search_params['min_price'])
        has_filter = True
        filter_logs.append(f"min_price>={search_params['min_price']}")
    if search_params.get('max_price') is not None:
        query = query.filter(Product.price <= search_params['max_price'])
        has_filter = True
        filter_logs.append(f"max_price<={search_params['max_price']}")

    # L·ªçc theo product_type (∆∞u ti√™n n·∫øu c√≥)
    if search_params.get('product_type'):
        pt = search_params['product_type']
        if isinstance(pt, list):
            query = query.filter(Product.product_type.in_(pt))
            filter_logs.append(f"product_type in {pt}")
        else:
            query = query.filter(Product.product_type == pt)
            filter_logs.append(f"product_type='{pt}'")
        has_filter = True

    # L·ªçc theo category (n·∫øu c√≥) b·∫±ng category_id, ch·ªâ fallback synonyms n·∫øu KH√îNG t√¨m th·∫•y category_id
    if search_params.get('category'):
        category_title = search_params['category'].strip().lower()
        category_obj = db.query(Category).filter(func.lower(Category.title) == category_title).first()
        if category_obj:
            query = query.filter(Product.category_id == category_obj.id)
            filter_logs.append(f"category_id={category_obj.id} ({category_obj.title})")
            has_filter = True
        else:
            synonyms = CATEGORY_SYNONYMS.get(category_title, [category_title])
            category_filters = [Product.category.has(Category.title.ilike(f"%{syn}%")) for syn in synonyms]
            query = query.filter(or_(*category_filters))
            filter_logs.append(f"category~synonyms={synonyms}")
            has_filter = True

    # L·ªçc theo tr·∫°ng th√°i s·∫£n ph·∫©m (status) n·∫øu kh√¥ng c√≥ product_type
    elif search_params.get('status'):
        status = search_params['status']
        if isinstance(status, list):
            query = query.filter(Product.product_type.in_(status))
            filter_logs.append(f"status in {status}")
        else:
            query = query.filter(Product.product_type == status)
            filter_logs.append(f"status='{status}'")
        has_filter = True

    # L·ªçc theo tag (v√≠ d·ª•: 'new', 'sale')
    if search_params.get('tag'):
        tag = search_params['tag'].strip().lower()
        query = query.filter(Product.tag.ilike(f"%{tag}%"))
        has_filter = True
        filter_logs.append(f"tag~='{tag}'")

    # L·ªçc theo danh m·ª•c (theo t√™n category, h·ªó tr·ª£ t·ª´ ƒë·ªìng nghƒ©a ph·ªï bi·∫øn)
    # ƒê√É ƒê∆Ø·ª¢C X·ª¨ L√ù ·ªû TR√äN, KH√îNG L·ªåC L·∫†I L·∫¶N N·ªÆA
    # if search_params.get('category'):
    #     category = search_params['category'].strip().lower()
    #     # Danh s√°ch t·ª´ ƒë·ªìng nghƒ©a ph·ªï bi·∫øn cho m·ªôt s·ªë category l·ªõn
    #     category_synonyms = {
    #         'ƒëi·ªán tho·∫°i': ['ƒëi·ªán tho·∫°i', 'phone', 'mobile', 'smartphone', 'cellphone', 'cell phone', 'mobiles'],
    #         'laptop': ['laptop', 'notebook', 'm√°y t√≠nh x√°ch tay'],
    #         'm√°y t√≠nh b·∫£ng': ['m√°y t√≠nh b·∫£ng', 'tablet', 'ipad'],
    #         # C√≥ th·ªÉ m·ªü r·ªông th√™m c√°c nh√≥m kh√°c n·∫øu c·∫ßn
    #     }
    #     synonyms = category_synonyms.get(category, [category])
    #     # T·∫°o filter OR cho t·∫•t c·∫£ t·ª´ ƒë·ªìng nghƒ©a
    #     category_filters = [Product.category.has(Category.title.ilike(f"%{syn}%")) for syn in synonyms]
    #     query = query.filter(or_(*category_filters))
    #     has_filter = True
    #     filter_logs.append(f"category~synonyms={synonyms}")

    # L·ªçc theo rating
    if search_params.get('rating') is not None:
        query = query.filter(Product.rating >= search_params['rating'])
        has_filter = True
        filter_logs.append(f"rating>={search_params['rating']}")

    # L·ªçc s·∫£n ph·∫©m gi·∫£m gi√° (flash sale)
    if search_params.get('is_flash_sale'):
        query = query.filter(Product.product_type == 'flash_sale')
        has_filter = True
        filter_logs.append("is_flash_sale=True (product_type='flash_sale')")

    # L·ªçc s·∫£n ph·∫©m c√≤n h√†ng (stock > 0)
    if search_params.get('in_stock'):
        query = query.filter(Product.stock > 0)
        has_filter = True
        filter_logs.append("in_stock=True")

    # S·∫Øp x·∫øp theo gi√° cao/th·∫•p n·∫øu c√≥ sort_by
    sort_by = search_params.get('sort_by')
    if sort_by == 'price_desc':
        query = query.order_by(Product.price.desc())
        filter_logs.append('sort_by=price_desc')
    elif sort_by == 'price_asc':
        query = query.order_by(Product.price.asc())
        filter_logs.append('sort_by=price_asc')

    if not has_filter:
        print('[DEBUG] ‚ö†Ô∏è Kh√¥ng c√≥ filter, kh√¥ng tr·∫£ v·ªÅ to√†n b·ªô s·∫£n ph·∫©m.')
        return []

    print(f"[DEBUG] üîé Filter √°p d·ª•ng: {', '.join(filter_logs)}")
    query = query.limit(limit * 2)  # L·∫•y nhi·ªÅu h∆°n ƒë·ªÉ dedup sau
    products = query.all()

    # Deduplicate by product title (gi·ªØ s·∫£n ph·∫©m ƒë·∫ßu ti√™n v·ªõi m·ªói title)
    seen_titles = set()
    deduped_products = []
    for p in products:
        if p.title not in seen_titles:
            deduped_products.append(p)
            seen_titles.add(p.title)
    products = deduped_products[:limit]

    # N·∫øu t√¨m theo name m√† kh√¥ng ra s·∫£n ph·∫©m, th·ª≠ fuzzy search v·ªõi ng∆∞·ª°ng an to√†n
    if fuzzy_name and not products:
        print('[DEBUG] üü° Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ilike, th·ª≠ fuzzy search...')
        # N·∫øu c√≥ category, ch·ªâ fuzzy trong nh√≥m category ƒë√≥
        fuzzy_products_query = db.query(Product).filter(Product.status == 'active')
        if search_params.get('category'):
            category_title = search_params['category'].strip().lower()
            category_obj = db.query(Category).filter(func.lower(Category.title) == category_title).first()
            if category_obj:
                fuzzy_products_query = fuzzy_products_query.filter(Product.category_id == category_obj.id)
        all_products = fuzzy_products_query.all()
        # T√°ch c√°c t·ª´ kh√≥a √Ω ƒë·ªãnh ra kh·ªèi fuzzy_name ƒë·ªÉ ch·ªâ l·∫•y t·ª´ kh√≥a th·ª±c s·ª±
        main_keywords = [kw for kw in fuzzy_name.split() if remove_accents(kw) not in [remove_accents(k) for k in INTENT_KEYWORDS]]
        # ∆Øu ti√™n l·ªçc brand: n·∫øu main_keywords c√≥ t·ª´ kh√≥a th∆∞∆°ng hi·ªáu (v√≠ d·ª•: 'samsung', 'oppo', 'xiaomi', ...), ch·ªâ l·∫•y s·∫£n ph·∫©m c√≥ ch·ª©a t·ª´ ƒë√≥ trong title ho·∫∑c short_description
        BRANDS = ['samsung', 'oppo', 'xiaomi', 'iphone', 'apple', 'realme', 'vivo', 'asus', 'nokia', 'sony', 'huawei', 'itel', 'mobell', 'masstel', 'lenovo', 'motorola']
        brand_kw = None
        for kw in main_keywords:
            if any(b in remove_accents(kw).lower() for b in BRANDS):
                brand_kw = kw
                break
        filtered_products = all_products
        if brand_kw:
            brand_kw_noaccent = remove_accents(brand_kw).lower()
            filtered_products = [p for p in all_products if brand_kw.lower() in p.title.lower() or brand_kw_noaccent in remove_accents(p.title.lower()) or (p.short_description and (brand_kw.lower() in p.short_description.lower() or brand_kw_noaccent in remove_accents(p.short_description.lower())))]
        else:
            for kw in main_keywords:
                kw_noaccent = remove_accents(kw)
                filtered_products = [p for p in filtered_products if kw.lower() in p.title.lower() or kw_noaccent in remove_accents(p.title.lower()) or (p.short_description and (kw.lower() in p.short_description.lower() or kw_noaccent in remove_accents(p.short_description.lower())))]
        # N·∫øu l·ªçc ra ƒë∆∞·ª£c s·∫£n ph·∫©m li√™n quan, ch·ªâ fuzzy trong nh√≥m n√†y
        if filtered_products and main_keywords:
            choices = [(f"{p.title} {p.short_description or ''}", p) for p in filtered_products]
        else:
            choices = [(f"{p.title} {p.short_description or ''}", p) for p in all_products]
        # S·∫Øp x·∫øp theo ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·∫£m d·∫ßn v·ªõi t·ª´ kh√≥a ch√≠nh
        sorted_choices = sorted(choices, key=lambda x: fuzz.ratio(fuzzy_name, x[0]), reverse=True)
        top_products = [c[1] for c in sorted_choices[:limit]]
        products = top_products

    return products

