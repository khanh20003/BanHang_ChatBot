import React, { useState, useEffect, useRef } from 'react';
import '../index.css'; // Import global styles if needed
import './Chatbot.css'; // Import Chatbot specific styles
// Import c√°c component kh√°c n·∫øu c·∫ßn, v√≠ d·ª• cho danh s√°ch s·∫£n ph·∫©m
// import ProductListMessage from './ProductListMessage';

// Nh·∫≠n customerId t·ª´ props n·∫øu c·∫ßn
const Chatbot = ({ customerId }) => {
    // State ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i m·ªü/ƒë√≥ng c·ªßa c·ª≠a s·ªï chat
    const [isOpen, setIsOpen] = useState(false); // B·∫Øt ƒë·∫ßu v·ªõi ƒë√≥ng
    // State ƒë·ªÉ l∆∞u tr·ªØ tin nh·∫Øn
    const [messages, setMessages] = useState([
        // Tin nh·∫Øn m·∫´u d·ª±a tr√™n ·∫£nh
        { text: 'Ch√†o m·ª´ng Anh Ch·ªã ƒë·∫øn v·ªõi Si√™u Th·ªã ƒêi·ªán m√°y - N·ªôi th·∫•t Ch·ª£ L·ªõn! Em l√† tr·ª£ l√Ω AI lu√¥n s·∫µn l√≤ng h·ªó tr·ª£ anh ch·ªã ·∫° üòä', sender: 'bot' },
    ]);
    // State ƒë·ªÉ l∆∞u tr·ªØ n·ªôi dung input
    const [inputMessage, setInputMessage] = useState('');
    const [isSending, setIsSending] = useState(false);

    // Ref cho v√πng tin nh·∫Øn ƒë·ªÉ cu·ªôn xu·ªëng d∆∞·ªõi
    const chatBoxRef = useRef(null);
     // Ref cho c·ª≠a s·ªï chat v√† n√∫t chat
    const chatWindowRef = useRef(null);
    const chatButtonRef = useRef(null);

    // H√†m ƒë·ªÉ toggle c·ª≠a s·ªï chat
    const toggleChatWindow = () => {
        setIsOpen(!isOpen);
    };

    // H√†m g·ª≠i tin nh·∫Øn
    const sendMessage = async () => {
        if (isSending) return;
        if (inputMessage.trim() === '') return;
        setIsSending(true);
        const userMessage = inputMessage;
        // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o state ngay l·∫≠p t·ª©c
        setMessages(prevMessages => [...prevMessages, { text: userMessage, sender: 'user' }]);
        setInputMessage('');

        // TODO: G·ª≠i userMessage v√† customerId ƒë·∫øn backend c·ªßa b·∫°n
        // console.log('Sending message to backend:', userMessage, 'for customer:', customerId);

        if (!customerId) {
            console.error("customerId is not provided. Cannot send message.");
            // T√πy ch·ªçn: hi·ªÉn th·ªã l·ªói cho ng∆∞·ªùi d√πng
            setMessages(prevMessages => [...prevMessages, { text: "L·ªói: Kh√¥ng c√≥ th√¥ng tin kh√°ch h√†ng ƒë·ªÉ g·ª≠i tin nh·∫Øn.", sender: 'bot' }]);
            return;
        }

        const apiUrl = 'http://127.0.0.1:8000/chat/'; // Endpoint API c·ªßa backend

        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message: userMessage,
                    customer_id: customerId // S·ª≠ d·ª•ng customerId t·ª´ props
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error('L·ªói khi g·ª≠i tin nh·∫Øn ƒë·∫øn backend:', response.status, errorData);
                setMessages(prevMessages => [...prevMessages, { text: `L·ªói: ${errorData.detail || response.statusText}`, sender: 'bot' }]);
                return;
            }

            const responseData = await response.json();
            console.log('Ph·∫£n h·ªìi t·ª´ chatbot backend:', responseData);

            // X·ª≠ l√Ω v√† th√™m tin nh·∫Øn ph·∫£n h·ªìi t·ª´ bot v√†o state
            // Gi·∫£ ƒë·ªãnh backend tr·∫£ v·ªÅ ph·∫£n h·ªìi d·∫°ng { response: "..." } ho·∫∑c { products: [...] }
            const botMessages = [];

            if (responseData && responseData.response) {
                 botMessages.push({ text: responseData.response, sender: 'bot', type: 'text' });
            }

            // X·ª≠ l√Ω c√°c lo·∫°i ph·∫£n h·ªìi kh√°c n·∫øu c√≥ (v√≠ d·ª•: danh s√°ch s·∫£n ph·∫©m)
            if (responseData && responseData.products && responseData.products.length > 0) {
                 // B·∫°n c√≥ th·ªÉ c·∫ßn m·ªôt component ri√™ng ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
                 botMessages.push({ type: 'product_list', data: responseData.products, sender: 'bot' });
            }

             // C·∫≠p nh·∫≠t state messages v·ªõi c√°c tin nh·∫Øn t·ª´ bot
            if (botMessages.length > 0) {
                 setMessages(prevMessages => [...prevMessages, ...botMessages]);
            } else if (!responseData.response) { // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ c·∫£ response text v√† data ƒë·∫∑c bi·ªát
                 setMessages(prevMessages => [...prevMessages, { text: "Bot kh√¥ng tr·∫£ l·ªùi.", sender: 'bot', type: 'text' }]);
            }

        } catch (error) {
            console.error('L·ªói k·∫øt n·ªëi ƒë·∫øn backend:', error);
            setMessages(prevMessages => [...prevMessages, { text: "L·ªói k·∫øt n·ªëi ƒë·∫øn server.", sender: 'bot', type: 'text' }]);
        } finally {
            setIsSending(false);
        }
    };

    // Effect ƒë·ªÉ cu·ªôn xu·ªëng cu·ªëi khi c√≥ tin nh·∫Øn m·ªõi
    useEffect(() => {
        if (chatBoxRef.current) {
            chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;
        }
    }, [messages]); // Cu·ªôn khi state messages thay ƒë·ªïi

    // Effect ƒë·ªÉ ƒëi·ªÅu ch·ªânh hi·ªÉn th·ªã c·ª≠a s·ªï chat
    useEffect(() => {
        if (chatWindowRef.current) {
            chatWindowRef.current.style.display = isOpen ? 'flex' : 'none';
        }
    }, [isOpen]); // Ch·∫°y l·∫°i khi isOpen thay ƒë·ªïi

    // H√†m x·ª≠ l√Ω click v√†o n√∫t h√†nh ƒë·ªông nhanh (v√≠ d·ª•)
    const handleQuickAction = (action) => {
        console.log('Quick action clicked:', action);
        // TODO: G·ª≠i action ƒë·∫øn backend ho·∫∑c x·ª≠ l√Ω t∆∞∆°ng ·ª©ng
        // V√≠ d·ª•: sendMessage(action); // G·ª≠i action nh∆∞ m·ªôt tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
    };


    return (
        <div className="chat-container" style={{ position: 'fixed', bottom: '20px', right: '20px', zIndex: 1000 }}>
            {/* N√∫t Chat Icon */}
            <button 
                ref={chatButtonRef}
                className="chat-button" 
                onClick={toggleChatWindow} 
                title="Chat v·ªõi ch√∫ng t√¥i"
                 style={{ width: '50px', height: '50px', borderRadius: '50%', backgroundColor: '#004AAD', color: 'white', border: 'none', cursor: 'pointer', display: isOpen ? 'none' : 'flex', alignItems: 'center', justifyContent: 'center' }}
            >
                {/* Icon chat */} { /* S·ª≠ d·ª•ng icon chat m·∫∑c ƒë·ªãnh */ }
                 <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path></svg>
            </button>

            {/* Chat Window */} {/* style display ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi useEffect */} 
            <div 
                ref={chatWindowRef}
                className="chat-window" 
                style={{ width: '350px', height: '500px', border: '1px solid #ccc', display: 'none', flexDirection: 'column', borderRadius: '8px', overflow: 'hidden' }}
            >
                {/* Header */}
                <div className="chat-header" style={{ backgroundColor: '#004AAD', color: 'white', padding: '10px', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                    <div className="chat-header-logo" style={{ marginRight: '10px' }}>
                        {/* Thay b·∫±ng logo th·∫≠t c·ªßa b·∫°n */}
                        <div style={{width: '30px', height: '30px', backgroundColor: 'yellow', borderRadius: '50%'}}></div>
                    </div>
                    <div className="chat-header-title" style={{ flexGrow: 1, fontWeight: 'bold' }}>
                        Si√™u Th·ªã ƒêi·ªán M√°y - N·ªôi Th·∫•t Ch·ª£ L·ªõn
                    </div>
                    <div className="chat-header-actions" style={{ display: 'flex', alignItems: 'center' }}>
                        {/* N√∫t refresh/reset chat (t·∫°m th·ªùi kh√¥ng c√≥ ch·ª©c nƒÉng) */}
                        <button title="L√†m m·ªõi" style={{ background: 'none', border: 'none', color: 'white', cursor: 'pointer', marginRight: '5px' }}>
                             <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21.5 2v6h-6M2.5 22v-6h6m0-10.5v.5a8 8 0 1 1 9.4 7.1l-.8 1.2c-1.9-2.5-4.6-4-9.6-4C7.3 11 4 14.3 4 18c0 1.2.3 2.3.8 3.3l-1.4.8C2.9 20.4 2 19.2 2 18c0-3.9 3.1-7 7-7 2.5 0 4.9 1.3 6.3 3.2l1.5-1.3c-2.3-3.1-6-5.2-10.3-5.2-4.6 0-8.5 3.5-9 8L2.5 6"/></svg>
                        </button>
                         {/* N√∫t ƒë√≥ng/thu nh·ªè */} {/* S·ª≠ d·ª•ng toggleChatWindow ƒë·ªÉ ƒë√≥ng */} 
                        <button title="ƒê√≥ng chat" onClick={toggleChatWindow} style={{ background: 'none', border: 'none', color: 'white', cursor: 'pointer' }}>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                        </button>
                    </div>
                </div>

                {/* Message Area */}
                <div className="chat-box" ref={chatBoxRef} style={{ flexGrow: 1, padding: '10px', overflowY: 'auto', backgroundColor: '#f0f0f0' }}>
                    {messages.map((msg, index) => (
                        <div key={index} className={`chat-bubble ${msg.sender}-message`} style={{ marginBottom: '10px', maxWidth: '80%', borderRadius: '8px', padding: '8px', alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start', backgroundColor: msg.sender === 'user' ? '#007bff' : '#e9e9eb', color: msg.sender === 'user' ? 'white' : '#333' }}>
                            {/* B·∫°n c√≥ th·ªÉ c·∫ßn x·ª≠ l√Ω hi·ªÉn th·ªã HTML ho·∫∑c c√°c lo·∫°i tin nh·∫Øn kh√°c ·ªü ƒë√¢y */}
                            {msg.text}
                        </div>
                    ))}
                </div>

                {/* Quick Actions (Optional) */}


                {/* Input Area */}
                <div className="chat-input-container" style={{ display: 'flex', alignItems: 'center', padding: '10px', borderTop: '1px solid #ccc' }}>
                     {/* Bi·ªÉu t∆∞·ª£ng menu ho·∫∑c t√πy ch·ªçn kh√°c ·ªü ƒë√¢y */}
                     <div className="chat-input-menu-icon" style={{ marginRight: '10px', cursor: 'pointer' }}>
                         {/* Thay b·∫±ng icon menu c·ªßa b·∫°n */}
                          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
                     </div>
                    <input
                        type="text"
                        className="chat-input"
                        placeholder="Nh·∫≠p tin nh·∫Øn..."
                        value={inputMessage}
                        onChange={(e) => setInputMessage(e.target.value)}
                        onKeyDown={(e) => {
                            if (e.key === 'Enter' && !isSending) {
                                e.preventDefault();
                                sendMessage();
                            }
                        }}
                        style={{ flexGrow: 1, padding: '8px', borderRadius: '20px', border: '1px solid #ccc', marginRight: '10px' }}
                    />
                    <button type="button" className="send-button" onClick={sendMessage} disabled={isSending} style={{ background: '#007bff', color: 'white', border: 'none', borderRadius: '50%', width: '35px', height: '35px', display: 'flex', alignItems: 'center', justifyContent: 'center', cursor: isSending ? 'not-allowed' : 'pointer' }}>
                         {/* Bi·ªÉu t∆∞·ª£ng g·ª≠i */}
                         <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="22" y2="2" x2="11" y1="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>
                    </button>
                </div>

                {/* Disclaimer */}
                <div className="chat-disclaimer" style={{ fontSize: '10px', textAlign: 'center', padding: '5px', borderTop: '1px solid #eee', color: '#666' }}>
                     Th√¥ng tin ch·ªâ mang t√≠nh tham kh·∫£o, ƒë∆∞·ª£c t∆∞ v·∫•n b·ªüi Tr√≠ Tu·ªá Nh√¢n T·∫°o. Anh ch·ªã vui l√≤ng li√™n h·ªá hotline ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt: 1900.2628.
                </div>

                {/* Powered by */}
                 <div className="chat-powered-by" style={{ fontSize: '10px', textAlign: 'right', padding: '5px', color: '#666' }}>
                     Powered by <span style={{ fontWeight: 'bold', color: 'green' }}>üåø Easy AI Chat</span>
                 </div>
            </div>
        </div>
    );
};

export default Chatbot;
